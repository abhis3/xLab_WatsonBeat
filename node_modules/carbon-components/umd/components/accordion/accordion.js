(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', '../../globals/js/misc/mixin', '../../globals/js/mixins/create-component', '../../globals/js/mixins/init-component-by-search', '../../globals/js/misc/event-matches'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('../../globals/js/misc/mixin'), require('../../globals/js/mixins/create-component'), require('../../globals/js/mixins/init-component-by-search'), require('../../globals/js/misc/event-matches'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.mixin, global.createComponent, global.initComponentBySearch, global.eventMatches);
    global.accordion = mod.exports;
  }
})(this, function (exports, _mixin2, _createComponent, _initComponentBySearch, _eventMatches) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _mixin3 = _interopRequireDefault(_mixin2);

  var _createComponent2 = _interopRequireDefault(_createComponent);

  var _initComponentBySearch2 = _interopRequireDefault(_initComponentBySearch);

  var _eventMatches2 = _interopRequireDefault(_eventMatches);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Accordion = function (_mixin) {
    _inherits(Accordion, _mixin);

    /**
     * Accordion.
     * @extends CreateComponent
     * @extends InitComponentBySearch
     * @param {HTMLElement} element The element working as an accordion.
     */
    function Accordion(element, options) {
      _classCallCheck(this, Accordion);

      var _this = _possibleConstructorReturn(this, (Accordion.__proto__ || Object.getPrototypeOf(Accordion)).call(this, element, options));

      _this.element.addEventListener('click', function (event) {
        var item = (0, _eventMatches2.default)(event, _this.options.selectorAccordionItem);
        if (item && !(0, _eventMatches2.default)(event, _this.options.selectorAccordionContent)) {
          item.classList.toggle(_this.options.classActive);
        }
      });

      _this.element.addEventListener('keypress', function (event) {
        var item = (0, _eventMatches2.default)(event, _this.options.selectorAccordionItem);
        if (item && !(0, _eventMatches2.default)(event, _this.options.selectorAccordionContent)) {
          _this._handleKeypress(event);
        }
      });
      return _this;
    }

    /**
     * Handles toggling of active state of accordion via keyboard
     * @param {Event} event The event triggering this method.
     */


    _createClass(Accordion, [{
      key: '_handleKeypress',
      value: function _handleKeypress(event) {
        if (event.which === 13 || event.which === 32) {
          event.target.classList.toggle(this.options.classActive);
        }
      }
    }]);

    return Accordion;
  }((0, _mixin3.default)(_createComponent2.default, _initComponentBySearch2.default));

  Accordion.options = {
    selectorInit: '[data-accordion]',
    selectorAccordionItem: '.bx--accordion__item',
    selectorAccordionContent: '.bx--accordion__content',
    classActive: 'bx--accordion__item--active'
  };
  Accordion.components = new WeakMap();
  exports.default = Accordion;
});